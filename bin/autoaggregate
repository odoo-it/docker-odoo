#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import yaml

from multiprocessing import cpu_count
from subprocess import check_call
from argparse import ArgumentParser

import logging
logger = logging.getLogger(__name__)


# Define CLI options
parser = ArgumentParser(
    description="Runs git-aggregate and install requirements",
)

parser.add_argument(
    "-c",
    "--config",
    type=str,
    help="Git Aggregator configuration file",
)
parser.add_argument(
    "-d",
    "--directory",
    type=str,
    help="Directory containing *.yml files",
)
parser.add_argument(
    "-i",
    "--install",
    action="store_true",
    help="Install requirements.txt, if present.",
)
parser.add_argument(
    "-u",
    "--user",
    action="store_true",
    help="If --install is set, run pip with --user.",
)
parser.add_argument(
    "-o",
    "--output",
    type=str,
    default=os.getcwd(),
)

args = parser.parse_args()


def gitaggregate(config):
    logger.info("Running gitaggregate with %s" % config)
    check_call(
        [
            "gitaggregate",
            "--expand-env",
            "--config",
            os.path.abspath(config),
            "--jobs",
            str(cpu_count() or 1),
            "aggregate",
        ],
        cwd=args.output,
        stderr=sys.stderr,
        stdout=sys.stdout,
    )


def pip_install(config):
    """ Loop through a git-aggregator file repositories and install requirements """
    req_files = set()
    with open(config) as yaml_file:
        for doc in yaml.safe_load_all(yaml_file):
            for repo in doc:
                repo_path = os.path.abspath(os.path.join(args.output, repo))
                req_file = os.path.join(repo_path, 'requirements.txt')
                if os.path.isfile(req_file):
                    req_files.add(req_file)
    for req_file in req_files:
        logger.info('Intalling %s' % req_file)
        pip_args = ["--no-cache-dir"]
        if args.user:
            pip_args += ["--user"]
        check_call(
            ['pip', 'install'] + pip_args + ["-r", req_file],
            stderr=sys.stderr,
            stdout=sys.stdout,
        )


# Initial gitaggregate
config_files = []

# Single config file
if args.config:
    config_files += [args.config]

# If it's a directory, process all yaml files
if args.directory:
    config_files += [
        os.path.join(args.directory, f)
        for f in os.listdir(args.directory)
        if f.lower().split(".")[-1] in ("yaml", "yml")
    ]

# Aggregate all
for config in config_files:
    gitaggregate(config)
    if args.install:
        pip_install(config)
