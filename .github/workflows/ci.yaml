name: ci

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types: [created]
  schedule:
    - cron: "0 8 * * 5"


jobs:

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Prepare Build Matrix
        id: matrix
        run: |
          DATA=$(docker buildx bake all --print | jq '.target | to_entries[] | {odoo: .value.args.ODOO_VERSION, target: .key, platform: .value.platforms[]}' | jq -s)
          echo "matrix<<EOF" >> "$GITHUB_OUTPUT"
          echo "$DATA" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      -
        name: Detect Versions
        id: versions
        run: |
          DATA=$(docker buildx bake all --print | jq '.target | to_entries[] | .value.args.ODOO_VERSION' | jq -s)
          echo "versions<<EOF" >> "$GITHUB_OUTPUT"
          echo "$DATA" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      -
        name: Show
        run: |
          echo "matrix = ${{ steps.matrix.outputs.matrix }}"
          echo "versions = ${{ steps.versions.outputs.versions }}"

  download-geoip:
    name: Download GeoIP databases
    runs-on: ubuntu-latest
    env:
      MAXMIND_USERID: ${{ secrets.MAXMIND_USERID }}
      MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
    outputs:
      cache-hit: ${{ steps.geoip-cache.outputs.cache-hit }}
    steps:
      -
        name: Get Date
        id: get-date
        shell: bash
        run: echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      -
        name: Check cache
        id: geoip-cache
        uses: actions/cache@v4
        with:
          path: 'geoip'
          key: geoip-${{ steps.get-date.outputs.date }}
          lookup-only: true
      -
        name: Download
        if: steps.geoip-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p geoip && cd geoip
          # Install GeoIP City database
          curl -L -u $MAXMIND_USERID:$MAXMIND_LICENSE_KEY "https://download.maxmind.com/geoip/databases/GeoLite2-City/download?suffix=tar.gz" -o /tmp/GeoLite2-City.tar.gz
          tar -xvzf /tmp/GeoLite2-City.tar.gz --wildcards --no-anchored '*.mmdb' --strip-components=1
          rm /tmp/GeoLite2-City.tar.gz
          # Install GeoIP Country database
          curl -L -u $MAXMIND_USERID:$MAXMIND_LICENSE_KEY "https://download.maxmind.com/geoip/databases/GeoLite2-Country/download?suffix=tar.gz" -o /tmp/GeoLite2-Country.tar.gz
          tar -xvzf /tmp/GeoLite2-Country.tar.gz --wildcards --no-anchored '*.mmdb' --strip-components=1
          rm /tmp/GeoLite2-Country.tar.gz
          # Show the files
          ls -la
          # Check if directory contains *.mmdb files and fail if it doesn't
          if [ -z "$(ls *.mmdb 2>/dev/null)" ]; then
          echo "Error: No *.mmdb files found in the geoip directory. Download failed or files were not extracted correctly."
            exit 1
          fi

  build:
    name: Build ${{ matrix.odoo }} (${{ matrix.platform }})
    runs-on: ubuntu-latest
    needs:
      - prepare
      - download-geoip
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrix) }}
    env:
      REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
      CACHE_KEY: ${{ matrix.odoo }}_${{ matrix.platform }}
      VERSION: ${{ matrix.odoo }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Prepare Slug
        id: slug
        run: echo "slug=${CACHE_KEY//\//-}" >> "$GITHUB_OUTPUT"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.platform != 'linux/amd64'
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=false
          tags: |
            # <odoo>.<release> (release)
            type=ref,event=tag,prefix=${{ matrix.odoo }}.
            # <odoo> (release)
            type=raw,value=${{ matrix.odoo }},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            # <odoo>-pr-<number> (pull request)
            type=ref,event=pr,prefix=${{ matrix.odoo }}-pr-
            # <odoo>-<sha> (default branch)
            type=sha,prefix=${{ matrix.odoo }}-,enable={{is_default_branch}}
            # <odoo>-latest (default branch)
            type=raw,value=latest,prefix=${{ matrix.odoo }}-,enable={{is_default_branch}}
      -
        name: Upload Metadata
        uses: actions/upload-artifact@v4
        if: matrix.platform == 'linux/amd64'
        with:
          name: bake-meta-${{ matrix.odoo }}
          path: ${{ steps.meta.outputs.bake-file }}
          if-no-files-found: error
          retention-days: 1
      -
        name: Download GeoIP
        id: geoip
        uses: actions/cache/restore@v4
        with:
          path: 'geoip'
          key: geoip-
          restore-keys: geoip-
          fail-on-cache-miss: true
      -
        name: Show GeoIP files
        run: ls -la geoip
      -
        name: Build and Push by Digest
        id: build
        uses: docker/bake-action@v5
        env:
          LOCAL_GEOIP_PATH: geoip
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}_${{ steps.meta.outputs.version }}
            *.cache-to=type=gha,mode=max,scope=${{ env.CACHE_KEY }}_${{ steps.meta.outputs.version }}
            *.output=type=docker,name=${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
            *.output=type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
            *.tags=
      -
        name: Export digest
        id: digest
        run: |
          digest=${{ fromJSON(steps.build.outputs.metadata)[matrix.target]['containerimage.digest'] }}
          mkdir -p /tmp/digests
          touch "/tmp/digests/${digest#sha256:}"
          echo "digest=$digest" >> "$GITHUB_OUTPUT"
          echo "$digest"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.slug.outputs.slug }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      -
        name: Test
        id: test
        if: github.event_name == 'pull_request' && matrix.platform == 'linux/amd64' && matrix.odoo != 'master'
        env:
          DOCKER_BUILDKIT: 0
          DOCKER_REPO: ${{ env.REGISTRY_IMAGE }}
          DOCKER_TAG: ${{ steps.meta.outputs.version }}
        run: |
          docker compose -f tests/compose.yaml build
          docker compose -f tests/compose.yaml run --rm odoo odoo -i mail,contacts --stop-after-init

  push:
    name: Merge & Push
    if: github.ref == 'refs/heads/master' || github.event.release.tag_name
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    strategy:
      fail-fast: false
      matrix:
        odoo: ${{ fromJson(needs.prepare.outputs.versions) }}
    env:
      REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
    steps:
      -
        name: Download Metadata
        id: meta
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ matrix.odoo }}
          path: /tmp
      -
        name: Download digests
        id: digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.odoo }}*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $( jq -cr '.target."docker-metadata-action".tags | map(select(startswith("${{ env.REGISTRY_IMAGE }}")) | "-t " + .) | join(" ")' /tmp/docker-metadata-action-bake.json ) \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)          
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect \
            ${{ env.REGISTRY_IMAGE }}:$(jq -r '.target."docker-metadata-action".args.DOCKER_META_VERSION' /tmp/docker-metadata-action-bake.json)
