name: ci

on:
  pull_request:
  push:
    branches:
      - master
  release:
    types: [created]
  schedule:
    - cron: "0 8 * * 5"

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        odoo:
          - "master"
          - "17.0"
          - "16.0"
          - "15.0"
          - "14.0"
          - "13.0"
          - "12.0"
        platform:
          - "linux/amd64"
          - "linux/arm64"
        exclude:
          - odoo: "12.0"
            platform: "linux/arm64"
          - odoo: "13.0"
            platform: "linux/arm64"
          - odoo: "14.0"
            platform: "linux/arm64"
          - odoo: "15.0"
            platform: "linux/arm64"

    env:
      CACHE_KEY: ${{ matrix.odoo }}_${{ matrix.platform }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=tag,prefix=${{ matrix.odoo }}.
            type=ref,event=tag,value=${{ matrix.odoo }}
            type=ref,event=pr,prefix=${{ matrix.odoo }}-pr-
            type=sha,prefix=${{ matrix.odoo }}-,enable={{is_default_branch}}
            type=raw,value=latest,prefix=${{ matrix.odoo }}-,enable={{is_default_branch}}
      -
        name: Prepare Bake Target
        id: target
        run: echo "target=$(echo '${{ matrix.odoo }}' | sed 's/\.0//g')" >> "$GITHUB_OUTPUT"
      -
        name: Build
        uses: docker/bake-action@v4
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ steps.target.outputs.target }}
          load: true
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}_${{ steps.meta.outputs.version }}
      -
        name: Push PR Cache
        if: github.event_name == 'pull_request'
        uses: docker/bake-action@v4
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ steps.target.outputs.target }}
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-to=type=gha,mode=max,scope=${{ env.CACHE_KEY }}_${{ steps.meta.outputs.version }}
      -
        name: Test
        if: github.event_name == 'pull_request' && matrix.platform == 'linux/amd64'
        env:
          DOCKER_REPO: ghcr.io/${{ github.repository }}
          DOCKER_TAG: ${{ steps.meta.outputs.version }}
        run: |
          docker-compose -f tests/compose.yaml build
          docker-compose -f tests/compose.yaml run --rm odoo odoo -i base --stop-after-init
      -
        name: Push
        if: github.ref == 'refs/heads/master'
        uses: docker/bake-action@v4
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ steps.target.outputs.target }}
          push: true
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}
            *.cache-to=type=gha,mode=max,scope=${{ env.CACHE_KEY }}
      -
        name: Release
        if: github.event.release.tag_name
        uses: docker/bake-action@v4
        with:
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ steps.target.outputs.target }}
          push: true
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.CACHE_KEY }}
