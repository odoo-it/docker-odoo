#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
from contextlib import closing
from string import Template

import logging
_logger = logging.getLogger(__name__)

try:
    # Python 2, where io.StringIO fails because it is unicode-only
    from StringIO import StringIO
except ImportError:
    from io import StringIO

try:
    from configparser import RawConfigParser
    parser = RawConfigParser(strict=False)
except ImportError:
    # Python 2, where strict=True doesn't exist
    from ConfigParser import RawConfigParser
    parser = RawConfigParser()

ODOO_VERSION = os.environ.get("ODOO_VERSION")
TARGET_FILE = os.environ.get("ODOO_RC", os.environ.get("OPENERP_SERVER"))
CONFIG_DIR = os.path.join(os.environ.get("RESOURCES"), "conf.d")
CONFIG_FILES = []

# Default configuration values (when missing)
DEFAULTS = {
    "UNACCENT": "true",
    "PROXY_MODE": "true",
    "WITHOUT_DEMO": "all",
    "ADMIN_PASSWORD": "admin",
}

ENVIRON_WITH_DEFAULTS = dict(DEFAULTS, **os.environ)

# Read all configuration files found in those folders
_logger.info("Merging found configuration files in %s", TARGET_FILE)
for file in sorted(os.listdir(CONFIG_DIR)):
    parser.read(os.path.join(CONFIG_DIR, file))

# Write it to a memory string object
with closing(StringIO()) as resultfp:
    parser.write(resultfp)
    resultfp.seek(0)
    # Process line by line
    result = []
    for line in resultfp:
        line = line.strip()
        # Try to expand variables, skip line if missing
        try:
            line = Template(line).substitute(ENVIRON_WITH_DEFAULTS)
        except KeyError as e:
            continue
        result.append(line)
    # Write it to destination
    with open(TARGET_FILE, "w+") as targetfp:
        targetfp.write('\n'.join(result))
